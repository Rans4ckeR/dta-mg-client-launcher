name: Publish with custom icon
on:
  workflow_dispatch:
    inputs:
      iconurl:
        description: 'Icon URL'
        required: true
        default: 'https://raw.githubusercontent.com/Rampastring/dta-xna-cncnet-client/master/DXMainClient/clienticon.ico'
        type: string
jobs:
  calculate-version:
    name: Calculate Version
    runs-on: windows-latest
    outputs:
      AssemblySemVer: ${{ steps.gitversion.outputs.AssemblySemVer }}
      AssemblySemFileVer: ${{ steps.gitversion.outputs.AssemblySemFileVer }}
      InformationalVersion: ${{ steps.gitversion.outputs.InformationalVersion }}
      SemVer: ${{ steps.gitversion.outputs.SemVer }}
      PreReleaseTag: ${{ steps.gitversion.outputs.PreReleaseTag }}
      Sha: ${{ steps.gitversion.outputs.Sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@main
        with:
          versionSpec: '5.x'
      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@main
  publish:
    name: Publish
    runs-on: windows-latest
    needs: calculate-version
    env:
      AssemblySemVer: ${{ needs.calculate-version.outputs.AssemblySemVer }}
      AssemblySemFileVer: ${{ needs.calculate-version.outputs.AssemblySemFileVer }}
      InformationalVersion: ${{ needs.calculate-version.outputs.InformationalVersion }}
      SemVer: ${{ needs.calculate-version.outputs.SemVer }}
      Sha: ${{ needs.calculate-version.outputs.Sha }}
    strategy:
      matrix:
        runtime: [win-x86, win-x64, win-arm64]
        framework: [net8.0-windows, net7.0-windows]
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: ${{ env.Sha }}
      - name: Set Icon
        run: curl ${{ github.event.inputs.iconurl }} -o mainclienticon.ico
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@main
        with:
          dotnet-version: '8.x.x'
      - name: Publish
        run: dotnet publish CnCNet.LauncherStub.csproj ${{ matrix.framework == 'net7.0-windows' && '-c Release' || '' }} --no-self-contained -p:PublishSingleFile=true -r ${{ matrix.runtime }} -f ${{ matrix.framework }} -p:DebugType=embedded -p:ApplicationIcon=mainclienticon.ico -p:AssemblyVersion=$env:GitVersion_AssemblySemVer -p:FileVersion=$env:GitVersion_AssemblySemFileVer -p:InformationalVersion=$env:GitVersion_InformationalVersion
      - name: Upload Artifacts
        uses: actions/upload-artifact@main
        with:
          name: CnCNet.LauncherStub-${{ matrix.framework }}-${{ matrix.runtime }}
          path: ./bin/Release/${{ matrix.framework }}/${{ matrix.runtime }}/publish
          if-no-files-found: error